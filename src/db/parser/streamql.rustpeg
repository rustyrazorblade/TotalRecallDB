use super::Statement;
use db::value::Value;
use db::row_builder::RowBuilder;
use super::{ColumnSpec, Operator, Expression, Fields};
use db::schema::Type;

#[pub]
statement -> Statement
    = insert_statement / declare_stream / select_statement

// top level statement types
declare_stream -> Statement
    = declare  stream name:table_name __ as? __
    lparen
    specs:column_spec_list
    rparen __ ";"
    {
        Statement::DeclareStream(name, specs)
    }

insert_statement -> Statement
    = insert __ into __ table:table __ set __ row_builder:field_value_list __ ";"
    { Statement::Insert(table, row_builder) }

select_statement -> Statement
    = select field_list from
      stream:table
      e:where_clause? ";"?
    { Statement::Select(stream, e) }

// end top level statement types

select = "select"i __
from = "from"i __
set = "set"i
insert = "insert"i
as = "as"i __

table -> String
    = [a-zA-Z_]+  { match_str.to_string() }

#[pub]
field_value_list -> RowBuilder
    = s:field_equals_value  ++ ","
    {
        let mut r = RowBuilder::new();
        for (k, v) in s.into_iter() {
            r.set(&k, v);
        }
        r
    }

#[pub]
column_spec_list -> Vec<ColumnSpec>
    = column_spec ++ ","

#[pub]
where_clause -> Box<Expression>
    = where e:expression { e }

#[pub]
field_list = (field __)  ++ ","


where = "where"i __

#[pub]
column_spec -> ColumnSpec
    = __ f:field __ t:data_type __
    {
        ColumnSpec::new(f, t)
    }

// this is used for inserts
#[pub]
field_equals_value -> (String, Value)
    = __ f:field __ equals  v:value __ { (f, v) }

equals= "=" __
stream = "stream"i __

#[pub]
field -> String
    = [a-zA-Z_]+  { match_str.to_string() }

#[pub]
table_name -> String
    = [a-zA-Z_]+  { match_str.to_string() }

#[pub]
value -> Value
    = int_value / string_value

#[pub]
int_value -> Value
    = int:int { Value::from(int) }

#[pub]
string_value -> Value
    = s:quoted_string
    { Value::from(s) }

#[pub]
quoted_string -> String
    = "'" s:string "'" {s}

#[pub]
string -> String
    = ([^'] / "''")*
    { match_str.to_string().replace("''", "'") }

operator -> Operator
    = "=" { Operator::Equal } /
      "!=" { Operator::NotEqual } /
      ">" { Operator::GreaterThan } /
      ">=" { Operator::GreaterThanEqual } /
      "<" { Operator::LessThan } /
      "<=" { Operator::LessThanEqual } /
      "and" { Operator::And } /
      "or" { Operator::Or } /
      "+" { Operator::Plus } /
      "-" { Operator::Minus } /
      "*" { Operator::Multiply } /
      "/" { Operator::Divide }

and_or -> Operator
    = "and" { Operator::And } /
      "or" { Operator::Or }


declare = "declare" __

int -> i64
    = "-"? [0-9]+ { match_str.parse().unwrap() }


// EXPRESSIONS, TIME FOR INSANITY

#[pub]
expression -> Box<Expression>
    = expression_and_or
    / expression_grouped
    / expression_operator
    / expression_value
    / expression_field

#[pub]
expression_and_or -> Box<Expression>
     = lhs:expression_no_and_or __ ao:operator __ rhs:expression
     { Box::new( Expression::Comparison(ao, lhs, rhs) ) }

#[pub]
expression_no_and_or -> Box<Expression>
    = expression_grouped
    / expression_operator
    / expression_value
    / expression_field

#[pub]
expression_grouped -> Box<Expression>
    = lparen e:expression rparen
    { e }

#[pub]
expression_value -> Box<Expression>
    = v:value
    { Box::new( Expression::Value( Value::from(v) ) ) }

#[pub]
expression_field -> Box<Expression>
    = f:field
    { Box::new(Expression::Field(f)) }

#[pub]
expression_operator -> Box<Expression>
    = lhs:expression_no_operator __
        op:operator __
        rhs:expression_no_operator
    {
    Box::new(Expression::Comparison(op, lhs, rhs))
    }

#[pub]
expression_no_operator -> Box<Expression>
    = expression_grouped
    / expression_field
    / expression_value

// END OF EXPRESSION MADNESS

lparen = "(" __
rparen = ")" __


into = "into"i __

__ = (whitespace / eol)*

whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

eol
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"

// data type defs
data_type -> Type
    = int_type / string_type / timestamp_type

int_type -> Type
    = "int"i { Type::Int }

string_type -> Type
    = ("string"i / "text"i) { Type::String }

timestamp_type -> Type
    = "timestamp"i { Type::Timestamp }
