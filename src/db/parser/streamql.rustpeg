use super::Statement;
use db::value::Value;
use db::row_builder::RowBuilder;

#[pub]
statement -> Statement
    = insert_statement


insert_statement -> Statement
    = insert __ into __ table:table __ set __ row_builder:field_value_list __ ";"
    { Statement::Insert(table, row_builder) }

set = "set"i
insert = "insert"i

table -> String
    = [a-zA-Z_]+  { match_str.to_string() }

#[pub]
field_value_list -> RowBuilder
    = s:field_equals_value  ++ ","
    {
        let mut r = RowBuilder::new();
        for (k, v) in s.into_iter() {
            r.set(&k, v);
        }
        r
    }


#[pub]
field_equals_value -> (String, Value)
    = __ f:field __ equals __ v:value __ { (f, v) }

#[pub]
quoted_string -> String
    = '"' s:string '"' {s}

#[pub]
string -> String
    = ([^\"] / "\"")*
    { String::from(match_str) }

equals = "="

#[pub]
field -> String
    = [a-zA-Z_]+  { match_str.to_string() }

#[pub]
value -> Value
    = int_value

#[pub]
int_value -> Value
    = int:int { Value::from(int) }

int -> i64
    = "-"? [0-9]+ { match_str.parse().unwrap() }

into = __ "into"i __

__ = (whitespace / eol)*

whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

eol
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"